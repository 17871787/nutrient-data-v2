# Nutrient Data Management System - Project Documentation

## Overview
A comprehensive nutrient flow modeling application for dairy farms, tracking nitrogen (N), phosphorus (P), potassium (K), and sulfur (S) through farm systems. Features both Simple Entry and Pro modes for different user expertise levels.

## Project Goals
1. **Accurate Nutrient Tracking**: Model nutrient flows through dairy farm systems
2. **Regulatory Compliance**: Ensure NVZ (Nitrate Vulnerable Zone) compliance (170 kg N/ha limit)
3. **Efficiency Optimization**: Calculate and improve NUE (Nitrogen Use Efficiency) and PUE (Phosphorus Use Efficiency)
4. **Environmental Impact**: Estimate GHG emissions using NUE as proxy
5. **User Flexibility**: Support both simple data entry and complex KOU-based modeling

## Architecture

### Core Data Models

#### Simple Entry Schema (src/schemas/simpleEntrySchema.js)
```javascript
farmInfo: {
  name: string,
  totalArea: number,        // hectares
  milkingCows: number,      // head count
  youngstock0_12: number,   // calves
  youngstock12_calving: number, // heifers
  milkCPpct: number,        // milk crude protein %
  mortalityPct: number      // annual mortality %
}

inputs: [{
  source: enum,             // concentrate, silage, hay, straw, fertiliser_*
  label: string,
  forageType: string,       // for forage selection
  fertilizerType: string,   // for fertilizer selection
  amount: number,           // tonnes/year or kg/year
  feedMode: enum,           // annual, daily
  dailyRate: number,        // kg/cow/day
  cpContent: number,        // CP% on DM basis
  nContent: number,         // N%
  availabilityN: number,    // N-availability factor (0-1)
  pContent: number,         // P%
  kContent: number,         // K%
  sContent: number          // S%
}]

outputs: [{
  type: enum,               // milk, livestock
  label: string,
  amount: number,           // litres/year or kg
  fatPct: number,           // butter-fat %
  proteinPct: number,       // true protein %
  nContent: number,         // N%
  pContent: number          // P%
}]

manure: {
  slurryApplied: number,    // m³/year
  slurryNContent: number,   // kg/m³
  slurryPContent: number,   // kg/m³
  slurryAvailabilityN: number, // fraction (0-1)
  slurryImported: number,   // m³/year
  slurryExported: number    // m³/year
}
```

#### KOU Structure (src/data/kouStructure.js)
```javascript
KOU_TYPES: {
  FIELD: 'field',
  LIVESTOCK_GROUP: 'livestock_group',
  FEED_STORE: 'feed_store',
  MANURE_STORE: 'manure_store',
  EXTERNAL: 'external',
  OUTPUT: 'output'
}

PATHWAY_TYPES: {
  FEEDING: 'feeding',
  MANURE_PRODUCTION: 'manure_production',
  MANURE_APPLICATION: 'manure_application',
  FERTILIZER_APPLICATION: 'fertilizer_application',
  HARVEST: 'harvest',
  SALE: 'sale',
  PURCHASE: 'purchase',
  ATMOSPHERIC_LOSS: 'atmospheric_loss',
  WATER_LOSS: 'water_loss'
}
```

### Key Functions

#### src/utils/simpleCalculations.js
```javascript
calculateSimpleBalance(formData) → {
  totalInputs: {N, P, K, S},      // kg
  effectiveInputs: {N, P, K, S},  // kg after availability
  totalOutputs: {N, P, K, S},     // kg
  manureNutrients: {N, P},        // kg
  balance: {N, P, K, S},          // kg (inputs - outputs)
  organicNPerHa: number,          // kg N/ha
  nvzCompliant: boolean,          // <= 170 kg N/ha
  nEfficiency: number,            // % (outputs/effective inputs)
  pEfficiency: number,            // % (outputs/inputs)
  estimatedLosses: {N, P},        // kg
  estimatedManureProduction: {N, P}, // kg
  mortalityRetention: {N, P}      // kg
}
```

Key calculations:
- CP to N conversion: CP ÷ 6.25
- Protein to N conversion: protein × 0.16
- Milk N: litres × (proteinPct/100) × 0.16
- Effective N: amount × N% × availability
- Mortality N retention: deadCows × 650kg × 0.03

#### src/utils/ghgEstimation.js
```javascript
estimateGHGfromNUE(nue, system) → {
  estimate: number,               // kg CO2e/kg milk
  lower: number,                  // 95% CI lower
  upper: number,                  // 95% CI upper
  r_squared: number,              // model fit
  rmse: number                    // prediction error
}
```

Regression coefficients by system:
- Grazing: y = -0.0049x + 1.3845 (R² = 0.2145)
- Housed: y = -0.0058x + 1.4823 (R² = 0.3289)
- Mixed: y = -0.0053x + 1.4287 (R² = 0.2612)

#### src/utils/systemCalculations.js
```javascript
calculateSystemBalance(kous, pathways) → {
  inputs: {N, P, K, S},           // kg
  outputs: {N, P, K, S},          // kg
  internal: {N, P, K, S},         // kg
  losses: {N, P, K, S},           // kg
  balance: {N, P, K, S},          // kg
  nEfficiency: number,            // %
  kouBalances: Map                // per-KOU balances
}
```

#### src/utils/dataTransformers.js
```javascript
transformToKOUs(simpleData) → {
  kous: {[id]: KOU},              // KOU objects
  pathways: [Pathway]             // nutrient flows
}
```

Creates:
- Farm and field KOUs
- Livestock groups (milking, youngstock)
- Feed and manure stores
- External suppliers/customers
- Nutrient pathways between KOUs

### Component Hierarchy

```
App.jsx
├── SimpleEntry/SimpleEntryMode.jsx
│   ├── InputRow.jsx
│   ├── InlineInputRow.jsx
│   └── GHGIndicator.jsx
└── HighResolutionNutrientBudget.jsx (Pro Mode)
    ├── KOUManager.jsx
    ├── PathwayManager.jsx
    ├── BalanceOverview.jsx
    ├── SankeyDiagram.jsx
    └── ScenarioPlanning.jsx
```

### ASCII Connection Map

```
┌─────────────────────────────────────────────────────────────────┐
│                         USER INTERFACE                            │
├─────────────────┬───────────────────────────────────────────────┤
│  SimpleEntry    │              Pro Mode                          │
│  ┌──────────┐   │  ┌────────────┐  ┌──────────────┐            │
│  │ 5 Steps  │   │  │KOU Manager │  │Pathway Mgr   │            │
│  │ Wizard   │   │  └──────┬─────┘  └───────┬──────┘            │
│  └─────┬────┘   │         │                 │                   │
│        │        │         ▼                 ▼                   │
│        │        │  ┌────────────────────────────┐               │
│        │        │  │   KOU/Pathway Structure    │               │
│        │        │  └────────────┬───────────────┘               │
│        │        │               │                               │
├────────┼────────┴───────────────┼───────────────────────────────┤
│        ▼                        ▼                               │
│  ┌─────────────┐         ┌──────────────┐                      │
│  │simpleCalcs  │         │systemCalcs   │                      │
│  └──────┬──────┘         └──────┬───────┘                      │
│         │                        │                              │
│         ▼                        ▼                              │
│  ┌─────────────────────────────────────┐                       │
│  │        Nutrient Balance Results      │                       │
│  │  • NUE/PUE Efficiency               │                       │
│  │  • NVZ Compliance                   │                       │
│  │  • GHG Estimation                   │                       │
│  └─────────────────────────────────────┘                       │
└─────────────────────────────────────────────────────────────────┘

Data Flow:
1. Simple Entry → Form Data → simpleCalculations → Results
2. Simple Entry → dataTransformers → KOU/Pathways → Pro Mode
3. Pro Mode → KOU/Pathways → systemCalculations → Results
```

## Code Style Guide

1. **React Components**: Functional components with hooks
2. **State Management**: useState, useReducer for complex state
3. **Validation**: Zod schemas with react-hook-form
4. **Styling**: Tailwind CSS utility classes
5. **Icons**: Lucide React icons
6. **Calculations**: Pure functions, no side effects
7. **Units**: SI units internally (kg, m³), display units vary

## Design Decisions

1. **N-Availability Factors**: Essential for accurate NUE calculation
   - Mineral fertilizers: 100%
   - Slurry: 35-50% (default 45%)
   - FYM: 10-25%
   - Organic fertilizers: 10-35%

2. **Protein to N Conversion**:
   - CP to N: CP ÷ 6.25 (industry standard)
   - Protein to N: protein × 0.16 (milk protein)

3. **Mortality Retention**: Nutrients retained on-farm from dead animals
   - N: deadCows × 650kg × 3%
   - P: deadCows × 650kg × 0.7%

4. **GHG Proxy**: NUE-based regression from literature
   - Simple, validated approach
   - System-specific coefficients
   - Includes uncertainty bounds

5. **Milk Units**: Changed from tonnes to litres
   - More intuitive for farmers
   - Automatic per-cow calculations
   - Density conversion handled internally

6. **Two-Mode Architecture**:
   - Simple: Wizard-based, aggregated data
   - Pro: KOU-based, detailed pathways
   - Seamless transition between modes

## Recent Updates (as of July 30, 2025)

### Initial Updates
1. Added milk composition fields (fat%, protein%)
2. Implemented veterinary consultant feedback:
   - CP labeling as dry matter basis
   - Forage type selector with defaults
   - Fertilizer type dropdown
   - N-availability tracking
   - PUE calculation display
   - Mortality percentage field
3. Changed milk units from tonnes to litres
4. Created experimental fork for UI testing
5. Integrated GHG estimation throughout

### Latest Session Updates (July 30, 2025)
1. **UI Improvements (Backlog items #10-12)**:
   - Desaturated success/error colors with design flags
   - Increased input padding to 16px
   - Implemented 8px grid system with CSS custom properties
   - All features toggleable via designFlags.ts

2. **Accessibility Fixes**:
   - Added aria-labels to all icon buttons
   - Fixed form label associations
   - Added titles to buttons without text

3. **Sainsbury's Theme**:
   - Created custom brand theme with #F06C00 primary color
   - Added gradient effects and enhanced styling
   - Created SVG logo integration
   - Theme accessible via ?theme=sainsburys parameter

4. **Technical Documentation**:
   - Created TECHNICAL_DOCUMENTATION.md with all calculations
   - Documented equations, constants, and assumptions
   - Added for veterinary review

5. **Veterinary Feedback Implementation**:
   - Feed-rate helper shows 2 decimal places
   - CP labeled as "CP % (fresh weight)"
   - Live N% calculation when CP changes (N = CP ÷ 6.25)
   - Fixed decimal input handling (e.g., ".30" now works)
   - Added DM% input to all forage rows
   - Live CP/N recalculation based on DM%
   - Changed pre-set forage label from "Grass Silage" to neutral "Forage"

6. **Data Input Improvements**:
   - Fertilizer N% bug fixed (now syncs with dropdown selection)
   - Updated forage K% defaults:
     * Grass Silage: 2.25%
     * Maize Silage: 1.0%
     * Whole-crop Silage: 1.0%
   - Fertilizer amounts now entered in tonnes/year (was kg/year)
   - Preserved kg N ha⁻¹ helper display

7. **Livestock Output Updates**:
   - Cull cows now entered as number + average live-weight
   - Live-weight converted to carcass weight using 54% kill-out ratio
   - N/P calculations based on carcass weight (2.5% N, 0.7% P)
   - Created livestock constants file

8. **User Experience**:
   - Added "include young-stock" reminders to feed/forage sections
   - Info tooltips explain why youngstock matters for NUE
   - Section headers group inputs by type (Purchased Feed, Forage, Fertilizers)

9. **Forage Calculations**:
   - Created forageMath.js utility functions
   - Added helper showing: "≈ X t DM • Y t CP (Z% DM)"
   - Correct fresh→dry→protein→N workflow implemented
   - Fresh weight CP% input with live DM% adjustments
   - Proper N% calculation: (CP fresh ÷ (DM% ÷ 100)) ÷ 6.25
   - Live recalculation when either CP% or DM% changes

10. **Code Quality**:
    - All accessibility issues resolved
    - Consistent use of feature flags via designFlags.ts
    - Proper TypeScript/JavaScript module structure
    - React Hook Form integration for all inputs
    - Tailwind CSS with custom theme support

## Key Files Modified

### Configuration & Constants
- `src/config/designFlags.ts` - UI feature toggles
- `src/constants/forageDefaults.js` - Forage K% values by type
- `src/constants/fertiliserDefaults.js` - Fertilizer N% by type
- `src/constants/livestock.js` - Kill-out ratio and carcass N/P%

### Utilities
- `src/utils/forageMath.js` - Fresh/dry/protein/N conversions
- `src/utils/units.js` - Unit conversion helpers
- `src/utils/inputHelpers.js` - Decimal input handling

### Components
- `src/components/FeedInputs.jsx` - Major updates for DM% workflow
- `src/components/SimpleEntry/SimpleEntryMode.jsx` - Section headers, youngstock reminders
- `src/components/SimpleEntry/FertiliserCard.jsx` - N% sync fixes
- `src/components/SimpleEntry/CullCowsInput.jsx` - Live-weight input

### Styling
- `src/styles/ui-improvements.css` - Desaturated colors, 8px grid
- `src/themes/sainsburys.css` - Brand theme implementation
- `public/logo.svg` - Sainsbury's logo

### Documentation
- `TECHNICAL_DOCUMENTATION.md` - Complete calculation reference
- `llms.txt` - This file, updated with session changes

## Deployment

- Production: nutrient-data-advanced.vercel.app
- Experimental: nutrient-data-experimental.vercel.app
- GitHub: Single repository (no fork yet)
- Framework: React 18 + Vite
- Hosting: Vercel